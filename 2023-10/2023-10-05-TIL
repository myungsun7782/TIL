# 2023년 10월 5일(목)

----

### Today I Learned 

- [SwiftUI] Combine

---

Combine은 Apple이 Swift로 작성한 선언적 스위프트 API로, 비동기 및 이벤트 기반 코드를 작성하기 위해 제공됩니다. SwiftUI와 같이, Combine은 코드의 선언적 표현을 강조합니다. SwiftUI에서 UI를 선언적으로 구축하는 것과 유사하게, Combine은 데이터 흐름과 변환을 선언적으로 설명합니다.

## Combine의 주요 구성 요소

1. **Publishers**: 값이나 시퀀스의 변화를 나타내는 객체. 가장 대표적으로 `Just`, `Future`, `PassthroughSubject` 등이 있습니다.
2. **Subscribers**: Publisher에서 값을 수신하고 반응하는 객체.
3. **Operators**: Publisher를 변환하여 새로운 Publisher를 만들거나, 값을 변환하거나 필터링하는 역할을 합니다. 예를 들면 `map`, `filter`, `combineLatest` 등이 있습니다.
4. **Cancellable**: Subscription을 나타내며, 작업을 취소할 때 사용합니다. 메모리 관리의 일종으로, Subscription이 더 이상 필요하지 않을 때 취소를 해야 합니다.

## SwiftUI와 Combine

SwiftUI의 `@State`, `@Binding`, `@ObservedObject`, `@EnvironmentObject` 등의 속성 래퍼는 Combine을 기반으로 합니다. 이를 통해 UI는 데이터 변화에 자동으로 반응합니다.

예를 들어, `@ObservedObject`는 해당 객체의 변화를 감지하고 UI를 업데이트할 때 사용되는 속성 래퍼입니다. 이 객체는 `ObservableObject` 프로토콜을 준수해야 하며, 내부의 `@Published` 속성이 변할 때마다 UI가 업데이트됩니다.

```swift
class UserData: ObservableObject {
    @Published var username: String = ""
}
```

## 간단한 예제

```swift
import SwiftUI
import Combine

class Counter: ObservableObject {
    @Published var value: Int = 0
}

struct CombineView: View {
    @ObservedObject var counter = Counter()

    var body: some View {
        VStack {
            Text("\(counter.value)")
            Button("Increase") {
                counter.value += 1
            }
        }
    }
}
```

여기서, `Counter` 객체의 `value`가 변경될 때마다 `Text` 뷰는 자동으로 업데이트됩니다.

## 결론

Combine은 비동기 및 이벤트 기반 코드를 작성하는 데 있어 강력한 도구입니다. SwiftUI와의 통합으로 인해, 데이터 변화에 따른 UI 업데이트를 쉽게 구현할 수 있습니다. 처음에는 학습 곡선이 있을 수 있지만, 한번 익히면 매우 유용하게 사용될 수 있습니다.
